package com.speedata.readpowermsg;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POWER".
*/
public class PowerDao extends AbstractDao<Power, String> {

    public static final String TABLENAME = "POWER";

    /**
     * Properties of entity Power.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CollectTime = new Property(0, String.class, "collectTime", true, "collectTime");
        public final static Property Level = new Property(1, int.class, "level", false, "Level");
        public final static Property Voltage = new Property(2, int.class, "voltage", false, "Voltage");
        public final static Property Electric = new Property(3, String.class, "electric", false, "Electric");
        public final static Property AverageElectric = new Property(4, String.class, "averageElectric", false, "AverageElectric");
    }


    public PowerDao(DaoConfig config) {
        super(config);
    }
    
    public PowerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POWER\" (" + //
                "\"collectTime\" TEXT PRIMARY KEY NOT NULL ," + // 0: collectTime
                "\"Level\" INTEGER NOT NULL ," + // 1: level
                "\"Voltage\" INTEGER NOT NULL ," + // 2: voltage
                "\"Electric\" TEXT," + // 3: electric
                "\"AverageElectric\" TEXT);"); // 4: averageElectric
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POWER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Power entity) {
        stmt.clearBindings();
 
        String collectTime = entity.getCollectTime();
        if (collectTime != null) {
            stmt.bindString(1, collectTime);
        }
        stmt.bindLong(2, entity.getLevel());
        stmt.bindLong(3, entity.getVoltage());
 
        String electric = entity.getElectric();
        if (electric != null) {
            stmt.bindString(4, electric);
        }
 
        String averageElectric = entity.getAverageElectric();
        if (averageElectric != null) {
            stmt.bindString(5, averageElectric);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Power entity) {
        stmt.clearBindings();
 
        String collectTime = entity.getCollectTime();
        if (collectTime != null) {
            stmt.bindString(1, collectTime);
        }
        stmt.bindLong(2, entity.getLevel());
        stmt.bindLong(3, entity.getVoltage());
 
        String electric = entity.getElectric();
        if (electric != null) {
            stmt.bindString(4, electric);
        }
 
        String averageElectric = entity.getAverageElectric();
        if (averageElectric != null) {
            stmt.bindString(5, averageElectric);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Power readEntity(Cursor cursor, int offset) {
        Power entity = new Power( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // collectTime
            cursor.getInt(offset + 1), // level
            cursor.getInt(offset + 2), // voltage
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // electric
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // averageElectric
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Power entity, int offset) {
        entity.setCollectTime(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLevel(cursor.getInt(offset + 1));
        entity.setVoltage(cursor.getInt(offset + 2));
        entity.setElectric(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAverageElectric(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Power entity, long rowId) {
        return entity.getCollectTime();
    }
    
    @Override
    public String getKey(Power entity) {
        if(entity != null) {
            return entity.getCollectTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Power entity) {
        return entity.getCollectTime() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
